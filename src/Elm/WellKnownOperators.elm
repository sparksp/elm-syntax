module Elm.WellKnownOperators exposing (wellKnownOperators)

import Dict
import Elm.Dependency exposing (Dependency)
import Elm.Interface exposing (Exposed(..))
import Elm.Syntax.Infix exposing (InfixDirection(..))


wellKnownOperators : List Dependency
wellKnownOperators =
    [ elmCore, elmUrl, elmParser ]


elmCore : Dependency
elmCore =
    { interfaces = Dict.fromList [ ( [ "Array" ], [ CustomType ( "Array", [] ), Function "empty", Function "isEmpty", Function "length", Function "initialize", Function "repeat", Function "fromList", Function "get", Function "set", Function "push", Function "toList", Function "toIndexedList", Function "foldr", Function "foldl", Function "filter", Function "map", Function "indexedMap", Function "append", Function "slice" ] ), ( [ "Basics" ], [ CustomType ( "Int", [] ), CustomType ( "Float", [] ), Operator { direction = Left, function = "add", operator = "+", precedence = 6 }, Operator { direction = Left, function = "sub", operator = "-", precedence = 6 }, Operator { direction = Left, function = "mul", operator = "*", precedence = 7 }, Operator { direction = Left, function = "fdiv", operator = "/", precedence = 7 }, Operator { direction = Left, function = "idiv", operator = "//", precedence = 7 }, Operator { direction = Right, function = "pow", operator = "^", precedence = 8 }, Function "toFloat", Function "round", Function "floor", Function "ceiling", Function "truncate", Operator { direction = Non, function = "eq", operator = "==", precedence = 4 }, Operator { direction = Non, function = "neq", operator = "/=", precedence = 4 }, Operator { direction = Non, function = "lt", operator = "<", precedence = 4 }, Operator { direction = Non, function = "gt", operator = ">", precedence = 4 }, Operator { direction = Non, function = "le", operator = "<=", precedence = 4 }, Operator { direction = Non, function = "ge", operator = ">=", precedence = 4 }, Function "max", Function "min", Function "compare", CustomType ( "Order", [ "LT", "EQ", "GT" ] ), CustomType ( "Bool", [ "True", "False" ] ), Function "not", Operator { direction = Right, function = "and", operator = "&&", precedence = 3 }, Operator { direction = Right, function = "or", operator = "||", precedence = 2 }, Function "xor", Operator { direction = Right, function = "append", operator = "++", precedence = 5 }, Function "modBy", Function "remainderBy", Function "negate", Function "abs", Function "clamp", Function "sqrt", Function "logBase", Function "e", Function "pi", Function "cos", Function "sin", Function "tan", Function "acos", Function "asin", Function "atan", Function "atan2", Function "degrees", Function "radians", Function "turns", Function "toPolar", Function "fromPolar", Function "isNaN", Function "isInfinite", Function "identity", Function "always", Operator { direction = Right, function = "apL", operator = "<|", precedence = 0 }, Operator { direction = Left, function = "apR", operator = "|>", precedence = 0 }, Operator { direction = Left, function = "composeL", operator = "<<", precedence = 9 }, Operator { direction = Right, function = "composeR", operator = ">>", precedence = 9 }, CustomType ( "Never", [] ), Function "never" ] ), ( [ "Bitwise" ], [ Function "and", Function "or", Function "xor", Function "complement", Function "shiftLeftBy", Function "shiftRightBy", Function "shiftRightZfBy" ] ), ( [ "Char" ], [ CustomType ( "Char", [] ), Function "isUpper", Function "isLower", Function "isAlpha", Function "isAlphaNum", Function "isDigit", Function "isOctDigit", Function "isHexDigit", Function "toUpper", Function "toLower", Function "toLocaleUpper", Function "toLocaleLower", Function "toCode", Function "fromCode" ] ), ( [ "Debug" ], [ Function "toString", Function "log", Function "todo" ] ), ( [ "Dict" ], [ CustomType ( "Dict", [] ), Function "empty", Function "singleton", Function "insert", Function "update", Function "remove", Function "isEmpty", Function "member", Function "get", Function "size", Function "keys", Function "values", Function "toList", Function "fromList", Function "map", Function "foldl", Function "foldr", Function "filter", Function "partition", Function "union", Function "intersect", Function "diff", Function "merge" ] ), ( [ "List" ], [ Function "singleton", Function "repeat", Function "range", Operator { direction = Right, function = "cons", operator = "::", precedence = 5 }, Function "map", Function "indexedMap", Function "foldl", Function "foldr", Function "filter", Function "filterMap", Function "length", Function "reverse", Function "member", Function "all", Function "any", Function "maximum", Function "minimum", Function "sum", Function "product", Function "append", Function "concat", Function "concatMap", Function "intersperse", Function "map2", Function "map3", Function "map4", Function "map5", Function "sort", Function "sortBy", Function "sortWith", Function "isEmpty", Function "head", Function "tail", Function "take", Function "drop", Function "partition", Function "unzip" ] ), ( [ "Maybe" ], [ CustomType ( "Maybe", [ "Just", "Nothing" ] ), Function "andThen", Function "map", Function "map2", Function "map3", Function "map4", Function "map5", Function "withDefault" ] ), ( [ "Platform" ], [ CustomType ( "Program", [] ), Function "worker", CustomType ( "Task", [] ), CustomType ( "ProcessId", [] ), CustomType ( "Router", [] ), Function "sendToApp", Function "sendToSelf" ] ), ( [ "Platform", "Cmd" ], [ CustomType ( "Cmd", [] ), Function "none", Function "batch", Function "map" ] ), ( [ "Platform", "Sub" ], [ CustomType ( "Sub", [] ), Function "none", Function "batch", Function "map" ] ), ( [ "Process" ], [ Alias "Id", Function "spawn", Function "sleep", Function "kill" ] ), ( [ "Result" ], [ CustomType ( "Result", [ "Ok", "Err" ] ), Function "withDefault", Function "map", Function "map2", Function "map3", Function "map4", Function "map5", Function "andThen", Function "toMaybe", Function "fromMaybe", Function "mapError" ] ), ( [ "Set" ], [ CustomType ( "Set", [] ), Function "empty", Function "singleton", Function "insert", Function "remove", Function "isEmpty", Function "member", Function "size", Function "union", Function "intersect", Function "diff", Function "toList", Function "fromList", Function "map", Function "foldl", Function "foldr", Function "filter", Function "partition" ] ), ( [ "String" ], [ CustomType ( "String", [] ), Function "isEmpty", Function "length", Function "reverse", Function "repeat", Function "replace", Function "append", Function "concat", Function "split", Function "join", Function "words", Function "lines", Function "slice", Function "left", Function "right", Function "dropLeft", Function "dropRight", Function "contains", Function "startsWith", Function "endsWith", Function "indexes", Function "indices", Function "toInt", Function "fromInt", Function "toFloat", Function "fromFloat", Function "fromChar", Function "cons", Function "uncons", Function "toList", Function "fromList", Function "toUpper", Function "toLower", Function "pad", Function "padLeft", Function "padRight", Function "trim", Function "trimLeft", Function "trimRight", Function "map", Function "filter", Function "foldl", Function "foldr", Function "any", Function "all" ] ), ( [ "Task" ], [ Alias "Task", Function "succeed", Function "fail", Function "map", Function "map2", Function "map3", Function "map4", Function "map5", Function "sequence", Function "andThen", Function "onError", Function "mapError", Function "perform", Function "attempt" ] ), ( [ "Tuple" ], [ Function "pair", Function "first", Function "second", Function "mapFirst", Function "mapSecond", Function "mapBoth" ] ) ], name = "elm/core", version = "1.0.5" }


elmUrl : Dependency
elmUrl =
    { interfaces = Dict.fromList [ ( [ "Url" ], [ Alias "Url", CustomType ( "Protocol", [ "Http", "Https" ] ), Function "toString", Function "fromString", Function "percentEncode", Function "percentDecode" ] ), ( [ "Url", "Builder" ], [ Function "absolute", Function "relative", Function "crossOrigin", Function "custom", CustomType ( "Root", [ "Absolute", "Relative", "CrossOrigin" ] ), CustomType ( "QueryParameter", [] ), Function "string", Function "int", Function "toQuery" ] ), ( [ "Url", "Parser" ], [ CustomType ( "Parser", [] ), Function "string", Function "int", Function "s", Operator { direction = Right, function = "slash", operator = "</>", precedence = 7 }, Function "map", Function "oneOf", Function "top", Function "custom", Operator { direction = Left, function = "questionMark", operator = "<?>", precedence = 8 }, Function "query", Function "fragment", Function "parse" ] ), ( [ "Url", "Parser", "Query" ], [ Alias "Parser", Function "string", Function "int", Function "enum", Function "custom", Function "map", Function "map2", Function "map3", Function "map4", Function "map5", Function "map6", Function "map7", Function "map8" ] ) ], name = "elm/url", version = "1.0.0" }


elmParser : Dependency
elmParser =
    { interfaces = Dict.fromList [ ( [ "Parser" ], [ Alias "Parser", Function "run", Function "int", Function "float", Function "number", Function "symbol", Function "keyword", Function "variable", Function "end", Function "succeed", Operator { direction = Left, function = "keeper", operator = "|=", precedence = 5 }, Operator { direction = Left, function = "ignorer", operator = "|.", precedence = 6 }, Function "lazy", Function "andThen", Function "problem", Function "oneOf", Function "map", Function "backtrackable", Function "commit", Function "token", Function "sequence", CustomType ( "Trailing", [ "Forbidden", "Optional", "Mandatory" ] ), Function "loop", CustomType ( "Step", [ "Loop", "Done" ] ), Function "spaces", Function "lineComment", Function "multiComment", CustomType ( "Nestable", [ "NotNestable", "Nestable" ] ), Function "getChompedString", Function "chompIf", Function "chompWhile", Function "chompUntil", Function "chompUntilEndOr", Function "mapChompedString", Alias "DeadEnd", CustomType ( "Problem", [ "Expecting", "ExpectingInt", "ExpectingHex", "ExpectingOctal", "ExpectingBinary", "ExpectingFloat", "ExpectingNumber", "ExpectingVariable", "ExpectingSymbol", "ExpectingKeyword", "ExpectingEnd", "UnexpectedChar", "Problem", "BadRepeat" ] ), Function "deadEndsToString", Function "withIndent", Function "getIndent", Function "getPosition", Function "getRow", Function "getCol", Function "getOffset", Function "getSource" ] ), ( [ "Parser", "Advanced" ], [ CustomType ( "Parser", [] ), Function "run", Alias "DeadEnd", Function "inContext", CustomType ( "Token", [ "Token" ] ), Function "int", Function "float", Function "number", Function "symbol", Function "keyword", Function "variable", Function "end", Function "succeed", Operator { direction = Left, function = "keeper", operator = "|=", precedence = 5 }, Operator { direction = Left, function = "ignorer", operator = "|.", precedence = 6 }, Function "lazy", Function "andThen", Function "problem", Function "oneOf", Function "map", Function "backtrackable", Function "commit", Function "token", Function "sequence", CustomType ( "Trailing", [ "Forbidden", "Optional", "Mandatory" ] ), Function "loop", CustomType ( "Step", [ "Loop", "Done" ] ), Function "spaces", Function "lineComment", Function "multiComment", CustomType ( "Nestable", [ "NotNestable", "Nestable" ] ), Function "getChompedString", Function "chompIf", Function "chompWhile", Function "chompUntil", Function "chompUntilEndOr", Function "mapChompedString", Function "withIndent", Function "getIndent", Function "getPosition", Function "getRow", Function "getCol", Function "getOffset", Function "getSource" ] ) ], name = "elm/parser", version = "1.1.0" }
